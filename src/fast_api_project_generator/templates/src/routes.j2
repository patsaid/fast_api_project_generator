from typing import List
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from . import models, schemas, services
from .database import get_db
import logging

logger = logging.getLogger(__name__)

router = APIRouter()

{% for table in config.tables %}
@router.get("/{{ table.name | lower }}s/", response_model=List[schemas.{{ table.name | capitalize }}InDB], tags=["{{ table.name | capitalize }}"])
def read_{{ table.name | lower }}s(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    logger.info(f"Fetching {{ table.name | capitalize }}s with skip={skip} and limit={limit}")
    try:
        items = services.get_items(models.{{ table.name | capitalize }}, skip, limit, db)
        return items
    except Exception as e:
        logger.error(f"Failed to fetch {{ table.name | capitalize }}s: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

@router.post("/{{ table.name | lower }}s/", response_model=schemas.{{ table.name | capitalize }}InDB, tags=["{{ table.name | capitalize }}"], status_code=201)
def create_{{ table.name | lower }}({{ table.name | lower }}: schemas.{{ table.name | capitalize }}Create, db: Session = Depends(get_db)):
    logger.info(f"Creating a new {{ table.name | capitalize }}: { {{ table.name | lower }}.dict() }")
    try:
        created_item = services.create_item(models.{{ table.name | capitalize }}, {{ table.name | lower }}, db)
        logger.info(f"Successfully created a new {{ table.name | capitalize }} with ID {created_item.id}")
        return created_item
    except IntegrityError as ie:
        logger.warning(f"Failed to create {{ table.name | capitalize }}: ID already exists - {str(ie)}")
        raise HTTPException(status_code=400, detail="{{ table.name | capitalize }} with this ID already exists")
    except Exception as e:
        logger.error(f"Failed to create {{ table.name | capitalize }}: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

@router.put("/{{ table.name | lower }}s/{id}", response_model=schemas.{{ table.name | capitalize }}InDB, tags=["{{ table.name | capitalize }}"])
def update_{{ table.name | lower }}(id: int, {{ table.name | lower }}: schemas.{{ table.name | capitalize }}Update, db: Session = Depends(get_db)):
    logger.info(f"Updating {{ table.name | capitalize }} with ID {id}")
    try:
        updated_item = services.update_item(models.{{ table.name | capitalize }}, id, {{ table.name | lower }}, db)
        logger.info(f"Successfully updated {{ table.name | capitalize }} with ID {id}")
        return updated_item
    except HTTPException as he:
        if he.status_code == 404:
            logger.warning(f"Update failed: {{ table.name | capitalize }} with ID {id} not found")
        else:
            logger.error(f"Update failed for {{ table.name | capitalize }} with ID {id}: {str(he)}")
        raise he
    except Exception as e:
        logger.error(f"Internal Server Error during update of {{ table.name | capitalize }} with ID {id}: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

@router.delete("/{{ table.name | lower }}s/{id}", response_model=schemas.{{ table.name | capitalize }}InDB, tags=["{{ table.name | capitalize }}"])
def delete_{{ table.name | lower }}(id: int, db: Session = Depends(get_db)):
    logger.info(f"Deleting {{ table.name | capitalize }} with ID {id}")
    try:
        deleted_item = services.delete_item(models.{{ table.name | capitalize }}, id, db)
        logger.info(f"Successfully deleted {{ table.name | capitalize }} with ID {id}")
        return deleted_item
    except HTTPException as he:
        if he.status_code == 404:
            logger.warning(f"Delete failed: {{ table.name | capitalize }} with ID {id} not found")
        else:
            logger.error(f"Delete failed for {{ table.name | capitalize }} with ID {id}: {str(he)}")
        raise he
    except Exception as e:
        logger.error(f"Internal Server Error during deletion of {{ table.name | capitalize }} with ID {id}: {str(e)}")
        raise HTTPException(status_code=500, detail="Internal Server Error")
{% endfor %}
