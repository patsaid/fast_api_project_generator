from sqlalchemy.orm import Session
from sqlalchemy.exc import IntegrityError
from fastapi import HTTPException

def get_items(model, skip: int, limit: int, db: Session):
    """
    Retrieve a list of items from the database.

    - **model**: SQLAlchemy model class for the target table.
    - **skip**: Number of items to skip.
    - **limit**: Maximum number of items to return.
    - **db**: Database session.

    Returns a list of items.
    """
    return db.query(model).offset(skip).limit(limit).all()

def create_item(model, item_data, db: Session):
    """
    Create a new item in the database.

    - **model**: SQLAlchemy model class for the target table.
    - **item_data**: Data for the new item, typically a Pydantic schema.
    - **db**: Database session.

    Returns the created item.
    """
    try:
        db_item = model(**item_data.dict())
        db.add(db_item)
        db.commit()
        db.refresh(db_item)
        return db_item
    except IntegrityError:
        db.rollback()
        raise

def update_item(model, item_id: int, item_data, db: Session):
    """
    Update an existing item in the database.

    - **model**: SQLAlchemy model class for the target table.
    - **item_id**: The ID of the item to update.
    - **item_data**: Updated data for the item, typically a Pydantic schema.
    - **db**: Database session.

    Returns the updated item.
    """
    db_item = db.query(model).filter(model.id == item_id).first()
    if db_item is None:
        raise HTTPException(status_code=404, detail=f"Item with ID {item_id} not found")
    
    for key, value in item_data.dict().items():
        setattr(db_item, key, value)

    try:
        db.commit()
        db.refresh(db_item)
        return db_item
    except Exception as e:
        db.rollback()
        raise e

def delete_item(model, item_id: int, db: Session):
    """
    Delete an item from the database.

    - **model**: SQLAlchemy model class for the target table.
    - **item_id**: The ID of the item to delete.
    - **db**: Database session.

    Returns the deleted item.
    """
    db_item = db.query(model).filter(model.id == item_id).first()
    if db_item is None:
        raise HTTPException(status_code=404, detail=f"Item with ID {item_id} not found")

    try:
        db.delete(db_item)
        db.commit()
        return db_item
    except Exception as e:
        db.rollback()
        raise e
