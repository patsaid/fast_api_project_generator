import sys
import os

# Add the src directory to the PYTHONPATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), 'src')))

import pytest
from fastapi.testclient import TestClient
from {{  config.project_snake_case }}.main import app
from {{  config.project_snake_case }}.config import Settings
from {{  config.project_snake_case }}.database import Base, get_db
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import docker
import os


settings = Settings()


def start_database_container():
    client = docker.from_env()

    # Adjust these parameters based on your specific database image and configuration
    container = client.containers.run(
        "postgres:latest",
        environment={
            "POSTGRES_USER": "{{ config.postgresql.user }}",
            "POSTGRES_PASSWORD": "{{ config.postgresql.password }}",
            "POSTGRES_DB": "{{  config.project_snake_case }}_test_db"
        },
        ports={"5432/tcp": 5433},
        detach=True
    )

    # Wait for the database to start
    import time
    time.sleep(5)  # Adjust the sleep duration as needed

    return container

# Set the test environment
@pytest.fixture(scope="session", autouse=True)
def set_test_environment():
    os.environ["ENVIRONMENT"] = "test"

    
@pytest.fixture(scope="module")
def db_session_integration():
    """
    Provides a database session for integration tests.
    """
    container = start_database_container()  # Adjust as needed for your setup

    engine = create_engine(settings.test_database_url)
    session_local = sessionmaker(autocommit=False, autoflush=True, bind=engine)
    
    # Create the tables
    Base.metadata.create_all(bind=engine)
    
    db = session_local()

    try:
        yield db
    finally:
        db.close()
        Base.metadata.drop_all(bind=engine)  # Drop the tables after tests
        container.stop()
        container.remove()
        engine.dispose()

@pytest.fixture()
def override_get_db_session(db_session_integration):
    """
    Fixture that overrides the `get_db` dependency in the FastAPI app with
    the `db_session_integration` fixture.
    """
    def override():
        return db_session_integration

    app.dependency_overrides[get_db] = override

@pytest.fixture(scope="function")
def client(override_get_db_session):
    """
    Fixture that provides a TestClient instance for making HTTP requests to the FastAPI app.
    """
    with TestClient(app) as _client:
        yield _client
